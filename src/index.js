const fs = require('fs')
const path = require('path')
const args = require('minimist')(process.argv.slice(2))
const chalk = require('chalk')
const semver = require('semver')
const { prompt } = require('enquirer')
const execa = require('execa')
const pkg = require('../package.json')

const currentVersion = pkg.version
const scripts = pkg.scripts || {}

const preId = args.preid || (semver.prerelease(currentVersion) && semver.prerelease(currentVersion)[0])
const isPublish = args.publish

const versionIncrements = [
  'patch',
  'minor',
  'major',
  ...(preId ? ['prepatch', 'preminor', 'premajor', 'prerelease'] : [])
]

const inc = i => semver.inc(currentVersion, i, preId)
const run = (bin, args, opts = {}) => execa(bin, args, { stdio: 'inherit', ...opts })
const step = msg => console.log(chalk.cyan(msg))

async function main() {
  let targetVersion = args._[0]

  if (!targetVersion) {
    // no explicit version, offer suggestions
    const { release } = await prompt({
      type: 'select',
      name: 'release',
      message: 'Select release type',
      choices: versionIncrements.map(i => `${i} (${inc(i)})`).concat(['custom'])
    })

    if (release === 'custom') {
      targetVersion = (
        await prompt({
          type: 'input',
          name: 'version',
          message: 'Input custom version',
          initial: currentVersion
        })
      ).version
    }
    else {
      targetVersion = release.match(/\((.*)\)/)[1]
    }
  }

  if (!semver.valid(targetVersion)) {
    throw new Error(`invalid target version: ${targetVersion}`)
  }

  const { yes } = await prompt({
    type: 'confirm',
    name: 'yes',
    message: `Releasing v${targetVersion}. Confirm?`
  })

  if (!yes) {
    return
  }

  const keys = Object.keys(scripts)

  step('\nUpdating package version...')
  updateVersions(targetVersion)

  // generate changelog
  step('\nGenerating changelog...')
  if (keys.includes('changelog')) {
    await run('pnpm', ['run', 'changelog'])
  }
  else {
    console.log('skipped')
  }

  // update pnpm-lock.yaml
  step('\nUpdating lockfile...')
  await run('pnpm', ['install', '--prefer-offline'])

  const { stdout } = await run('git', ['diff'], { stdio: 'pipe' })
  if (stdout) {
    step('\nCommitting changes...')
    await run('git', ['add', '-A'])
    await run('git', ['commit', '-m', `release: v${targetVersion}`])
  }
  else {
    console.log('No changes to commit.')
  }

  // publish packages
  step('\nPublishing packages...')
  if (isPublish) {
    await publishPackage(targetVersion)
  }
  else {
    console.log('skipped')
  }

  // push to GitHub
  step('\nPushing to GitHub...')
  await run('git', ['tag', `v${targetVersion}`])
  await run('git', ['push', 'origin', `refs/tags/v${targetVersion}`])
  await run('git', ['push'])

  console.log(chalk.green('finished.'))
}

function updateVersions(version) {
  const pkgPath = path.resolve(path.resolve(process.cwd(), '.'), 'package.json')
  const pkg = JSON.parse(fs.readFileSync(pkgPath, 'utf-8'))
  pkg.version = version
  fs.writeFileSync(pkgPath, `${JSON.stringify(pkg, null, 2)}\n`)
}

async function publishPackage(version) {
  let releaseTag = null
  if (args.tag) {
    releaseTag = args.tag
  }
  else if (version.includes('alpha')) {
    releaseTag = 'alpha'
  }
  else if (version.includes('beta')) {
    releaseTag = 'beta'
  }
  else if (version.includes('rc')) {
    releaseTag = 'rc'
  }

  step('Publishing ...')
  try {
    await run(
      'yarn',
      [
        'publish',
        '--new-version',
        version,
        ...(releaseTag ? ['--tag', releaseTag] : []),
        '--access',
        'public'
      ],
      {
        stdio: 'pipe'
      }
    )
    console.log(chalk.green(`Successfully published ${pkg.name}@${version}`))
  }
  catch (e) {
    if (e.stderr.match(/previously published/)) {
      console.log(chalk.red(`Skipping already published: ${pkg.name}`))
    }
    else {
      throw e
    }
  }
}

main().catch((err) => {
  console.error(err)
})

const str = 'M131.685 56V26.9091H140.648C142.485 26.9091 144.067 27.2689 145.392 27.9886C146.718 28.7083 147.736 29.7074 148.446 30.9858C149.157 32.2547 149.512 33.732 149.512 35.4176C149.512 37.0843 149.157 38.5521 148.446 39.821C147.736 41.0805 146.718 42.0653 145.392 42.7756C144.076 43.4858 142.499 43.8409 140.662 43.8409H132.637V42.179H140.62C142.116 42.179 143.394 41.8996 144.455 41.3409C145.516 40.7822 146.33 40.0009 146.898 38.9972C147.466 37.9839 147.75 36.7907 147.75 35.4176C147.75 34.035 147.466 32.8324 146.898 31.8097C146.33 30.7775 145.511 29.9773 144.441 29.4091C143.38 28.8409 142.102 28.5568 140.605 28.5568H133.461V56H131.685ZM143.631 42.8182L150.79 56H148.745L141.628 42.8182H143.631ZM164.27 56.4545C162.301 56.4545 160.587 55.9669 159.128 54.9915C157.67 54.0161 156.543 52.6809 155.748 50.9858C154.952 49.2907 154.554 47.3589 154.554 45.1903C154.554 43.0123 154.952 41.071 155.748 39.3665C156.552 37.6619 157.656 36.3172 159.057 35.3324C160.459 34.3475 162.059 33.8551 163.858 33.8551C165.08 33.8551 166.235 34.1013 167.324 34.5938C168.423 35.0767 169.389 35.7775 170.222 36.696C171.065 37.6146 171.723 38.7225 172.196 40.0199C172.679 41.3172 172.921 42.7756 172.921 44.3949V45.4744H155.648V43.8977H171.188C171.188 42.3163 170.866 40.8911 170.222 39.6222C169.578 38.3532 168.702 37.3447 167.594 36.5966C166.486 35.8485 165.241 35.4744 163.858 35.4744C162.409 35.4744 161.117 35.8816 159.98 36.696C158.854 37.5009 157.959 38.59 157.296 39.9631C156.642 41.3362 156.301 42.8703 156.273 44.5653V45.2756C156.273 47.0937 156.59 48.7273 157.225 50.1761C157.869 51.6155 158.787 52.7566 159.98 53.5994C161.174 54.4328 162.604 54.8494 164.27 54.8494C165.463 54.8494 166.481 54.6506 167.324 54.2528C168.176 53.8456 168.873 53.3532 169.412 52.7756C169.952 52.1979 170.359 51.6392 170.634 51.0994L172.211 51.7386C171.879 52.4678 171.363 53.197 170.662 53.9261C169.971 54.6458 169.09 55.2472 168.02 55.7301C166.96 56.2131 165.71 56.4545 164.27 56.4545ZM180.62 26.9091V56H178.887V26.9091H180.62ZM196.301 56.4545C194.332 56.4545 192.618 55.9669 191.159 54.9915C189.701 54.0161 188.574 52.6809 187.779 50.9858C186.983 49.2907 186.586 47.3589 186.586 45.1903C186.586 43.0123 186.983 41.071 187.779 39.3665C188.584 37.6619 189.687 36.3172 191.088 35.3324C192.49 34.3475 194.09 33.8551 195.89 33.8551C197.111 33.8551 198.266 34.1013 199.355 34.5938C200.454 35.0767 201.42 35.7775 202.253 36.696C203.096 37.6146 203.754 38.7225 204.228 40.0199C204.711 41.3172 204.952 42.7756 204.952 44.3949V45.4744H187.679V43.8977H203.219C203.219 42.3163 202.897 40.8911 202.253 39.6222C201.609 38.3532 200.733 37.3447 199.625 36.5966C198.517 35.8485 197.272 35.4744 195.89 35.4744C194.441 35.4744 193.148 35.8816 192.012 36.696C190.885 37.5009 189.99 38.59 189.327 39.9631C188.674 41.3362 188.333 42.8703 188.304 44.5653V45.2756C188.304 47.0937 188.622 48.7273 189.256 50.1761C189.9 51.6155 190.819 52.7566 192.012 53.5994C193.205 54.4328 194.635 54.8494 196.301 54.8494C197.495 54.8494 198.513 54.6506 199.355 54.2528C200.208 53.8456 200.904 53.3532 201.444 52.7756C201.983 52.1979 202.391 51.6392 202.665 51.0994L204.242 51.7386C203.91 52.4678 203.394 53.197 202.694 53.9261C202.002 54.6458 201.122 55.2472 200.051 55.7301C198.991 56.2131 197.741 56.4545 196.301 56.4545ZM216.699 56.4688C215.44 56.4688 214.284 56.2178 213.233 55.7159C212.192 55.214 211.354 54.4801 210.719 53.5142C210.094 52.5483 209.782 51.3741 209.782 49.9915C209.782 49.0824 209.943 48.2822 210.265 47.5909C210.587 46.8996 211.084 46.303 211.756 45.8011C212.428 45.2992 213.29 44.8873 214.341 44.5653C215.392 44.2339 216.647 43.9782 218.105 43.7983C219.213 43.6657 220.203 43.5379 221.074 43.4148C221.945 43.2822 222.627 43.0786 223.12 42.804C223.622 42.5294 223.873 42.1127 223.873 41.554V40.6449C223.873 39.054 223.371 37.7898 222.367 36.8523C221.363 35.9148 219.98 35.446 218.219 35.446C216.657 35.446 215.34 35.7917 214.27 36.483C213.21 37.1648 212.466 38.0455 212.04 39.125L210.407 38.5142C210.823 37.4725 211.425 36.6061 212.211 35.9148C213.006 35.2235 213.915 34.7074 214.938 34.3665C215.97 34.0256 217.05 33.8551 218.176 33.8551C219.152 33.8551 220.08 33.9924 220.961 34.267C221.851 34.5417 222.641 34.9583 223.333 35.517C224.033 36.0758 224.587 36.7907 224.995 37.6619C225.402 38.5237 225.605 39.5559 225.605 40.7585V56H223.873V52.0653H223.745C223.366 52.8797 222.845 53.6231 222.182 54.2955C221.529 54.9583 220.738 55.4886 219.81 55.8864C218.891 56.2746 217.855 56.4688 216.699 56.4688ZM216.87 54.8636C218.233 54.8636 219.441 54.5322 220.492 53.8693C221.552 53.197 222.381 52.2784 222.978 51.1136C223.574 49.9489 223.873 48.6278 223.873 47.1506V43.9403C223.655 44.1297 223.337 44.3002 222.921 44.4517C222.514 44.5937 222.05 44.7216 221.529 44.8352C221.017 44.9394 220.478 45.0341 219.909 45.1193C219.351 45.1951 218.806 45.2661 218.276 45.3324C216.685 45.5218 215.388 45.8153 214.384 46.2131C213.39 46.6013 212.66 47.1127 212.196 47.7472C211.742 48.3816 211.515 49.1487 211.515 50.0483C211.515 51.535 212.026 52.7093 213.049 53.571C214.071 54.4328 215.345 54.8636 216.87 54.8636ZM246.735 38.8835L245.13 39.3097C244.874 38.5142 244.509 37.8277 244.036 37.25C243.562 36.6723 242.966 36.2273 242.246 35.9148C241.536 35.5928 240.684 35.4318 239.689 35.4318C238.089 35.4318 236.777 35.8295 235.755 36.625C234.741 37.4205 234.235 38.4574 234.235 39.7358C234.235 40.7775 234.58 41.6392 235.272 42.321C235.963 42.9934 237.019 43.5047 238.439 43.8551L241.792 44.6932C243.515 45.1193 244.812 45.8106 245.684 46.767C246.555 47.714 246.99 48.893 246.99 50.304C246.99 51.5066 246.664 52.572 246.01 53.5C245.357 54.428 244.453 55.1525 243.297 55.6733C242.151 56.1941 240.816 56.4545 239.292 56.4545C237.256 56.4545 235.584 55.9811 234.277 55.0341C232.971 54.0777 232.132 52.7093 231.763 50.929L233.425 50.5028C233.738 51.9233 234.386 53.0076 235.371 53.7557C236.365 54.4943 237.667 54.8636 239.277 54.8636C241.058 54.8636 242.492 54.4422 243.581 53.5994C244.68 52.7566 245.229 51.6771 245.229 50.3608C245.229 49.357 244.907 48.5095 244.263 47.8182C243.619 47.1269 242.644 46.6203 241.337 46.2983L237.857 45.446C236.077 45.0104 234.741 44.3144 233.851 43.358C232.961 42.392 232.516 41.2036 232.516 39.7926C232.516 38.6184 232.824 37.5862 233.439 36.696C234.055 35.8059 234.902 35.1098 235.982 34.608C237.061 34.1061 238.297 33.8551 239.689 33.8551C241.536 33.8551 243.042 34.2907 244.206 35.1619C245.371 36.0331 246.214 37.2737 246.735 38.8835ZM261.497 56.4545C259.527 56.4545 257.813 55.9669 256.355 54.9915C254.896 54.0161 253.77 52.6809 252.974 50.9858C252.179 49.2907 251.781 47.3589 251.781 45.1903C251.781 43.0123 252.179 41.071 252.974 39.3665C253.779 37.6619 254.882 36.3172 256.284 35.3324C257.685 34.3475 259.286 33.8551 261.085 33.8551C262.306 33.8551 263.462 34.1013 264.551 34.5938C265.649 35.0767 266.615 35.7775 267.449 36.696C268.291 37.6146 268.949 38.7225 269.423 40.0199C269.906 41.3172 270.147 42.7756 270.147 44.3949V45.4744H252.875V43.8977H268.414C268.414 42.3163 268.092 40.8911 267.449 39.6222C266.805 38.3532 265.929 37.3447 264.821 36.5966C263.713 35.8485 262.467 35.4744 261.085 35.4744C259.636 35.4744 258.343 35.8816 257.207 36.696C256.08 37.5009 255.185 38.59 254.522 39.9631C253.869 41.3362 253.528 42.8703 253.5 44.5653V45.2756C253.5 47.0937 253.817 48.7273 254.451 50.1761C255.095 51.6155 256.014 52.7566 257.207 53.5994C258.4 54.4328 259.83 54.8494 261.497 54.8494C262.69 54.8494 263.708 54.6506 264.551 54.2528C265.403 53.8456 266.099 53.3532 266.639 52.7756C267.179 52.1979 267.586 51.6392 267.86 51.0994L269.437 51.7386C269.106 52.4678 268.59 53.197 267.889 53.9261C267.198 54.6458 266.317 55.2472 265.247 55.7301C264.186 56.2131 262.936 56.4545 261.497 56.4545Z'
